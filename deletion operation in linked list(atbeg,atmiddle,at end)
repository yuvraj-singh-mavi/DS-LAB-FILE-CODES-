#include <stdio.h>
#include <stdlib.h>
 
struct Node {
    int data;
    struct Node* next;
    
};
struct Node* head = NULL;
// This function prints contents of linked list starting
// from the given node
void printList(struct Node* n)
{
    while (n != NULL) {
        printf(" %d ", n->data);
        n = n->next;
    }
}
void deletefirst()
{
            head = head->next;
    
}
void deletelast()
{
struct Node* temp = head;
while(temp->next->next!=NULL){
  temp = temp->next;
}
temp->next = NULL;
   
}
void insertbeg()
{
struct Node *newNode;
newNode = malloc(sizeof(struct Node));
newNode->data = 4;
newNode->next = head;
head = newNode;
}

void insertend()
{
struct Node *newNode;
newNode = malloc(sizeof(struct Node));
newNode->data = 4;
newNode->next = NULL;

struct Node *temp = head;
while(temp->next != NULL){
  temp = temp->next;
}

temp->next = newNode;
}

void insertmid(int pos)
{
struct Node *newNode;
newNode = malloc(sizeof(struct Node));
newNode->data = 4;

struct Node *temp = head;

for(int i=2; i < pos; i++) {
  if(temp->next != NULL) {
    temp = temp->next;
  }
}
newNode->next = temp->next;
temp->next = newNode;
}

/*void deletemiddle(int pos)
{
struct Node* temp = head;

for(int i=2; i< pos; i++) 
{
  if(temp->next!=NULL)
 {
    temp = temp->next;
  }
}

temp->next = temp->next->next;
}*/

 
// Driver's code
int main()
{
    int pos = 2;
    struct Node* second = NULL;
    struct Node* third = NULL;
 
    // allocate 3 nodes in the heap
    head = (struct Node*)malloc(sizeof(struct Node));
    second = (struct Node*)malloc(sizeof(struct Node));
    third = (struct Node*)malloc(sizeof(struct Node));
 
    head->data = 1; // assign data in first node
    head->next = second; // Link first node with second
 
    second->data = 2; // assign data to second node
    second->next = third;
 
    third->data = 3; // assign data to third node
    third->next = NULL;
 
    // Function call
    

    //deletefirst();
    //deletelast();
//deletemiddle(pos);
  //insertbeg();
  //insertend();
  insertmid(3);
  printList(head);
    return 0;
}
